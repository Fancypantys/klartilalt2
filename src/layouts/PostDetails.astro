---
import { render } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import BackToTopButton from "@/components/BackToTopButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";

import { SITE } from "@/config";

export interface Props {
  post: any;
  posts: any[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags = [],
  hideEditPost,
  slug
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback)
const ogImage = ogImageUrl ?? undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */
const allPosts = posts.map((p) => ({
  id: p.id,
  title: p?.data?.title ?? "",
  slug: p?.data?.slug ?? "",
}));

const currentPostIndex = allPosts.findIndex((a) => a.id === post.id);

const prevPost = currentPostIndex > 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex >= 0 && currentPostIndex < allPosts.length - 1
    ? allPosts[currentPostIndex + 1]
    : null;
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-app px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="my-2 flex items-center gap-2">
      <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
      <span
        aria-hidden="true"
        class:list={[
          "max-sm:hidden",
          { hidden: !SITE.editPost.enabled || hideEditPost },
        ]}>|</span
      >
      <EditPost {hideEditPost} {post} class="max-sm:hidden" />
    </div>
    <article
      id="article"
      class="app-prose mx-auto mt-8 max-w-app prose-pre:bg-(--shiki-light-bg) dark:prose-pre:bg-(--shiki-dark-bg)"
    >
      <Content />
    </article>

    <hr class="my-8 border-dashed" />

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <ul class="mt-4 mb-8 sm:my-8">
{tags.map((tag: string) => <Tag tag={slugifyStr(tag)} tagName={tag} />)}

    </ul>

    <BackToTopButton />

    <ShareLinks />

    <hr class="my-6 border-dashed" />

<!-- Previous/Next Post Buttons -->
<div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
  {
    prevPost && (
      <a
        href={`/posts/${prevPost.slug}`}
        class="flex w-full gap-1 hover:opacity-75"
      >
        <span class="inline-block flex-none rtl:rotate-180" aria-hidden="true">←</span>
        <div>
          <span>Previous Post</span>
          <div class="text-sm text-accent/85">{prevPost.title}</div>
        </div>
      </a>
    )
  }
  {
    nextPost && (
      <a
        href={`/posts/${nextPost.slug}`}
        class="flex w-full justify-end gap-1 text-end hover:opacity-75 sm:col-start-2"
      >
        <div>
          <span>Next Post</span>
          <div class="text-sm text-accent/85">{nextPost.title}</div>
        </div>
        <span class="inline-block flex-none rtl:rotate-180" aria-hidden="true">→</span>
      </a>
    )
  }
</div>

  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  function createProgressBar() {
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";
    progressContainer.appendChild(progressBar);
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      const myBar = document.getElementById("myBar");
      if (myBar) myBar.style.width = scrolled + "%";
    });
  }
  updateScrollProgress();

  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ms-2 no-underline opacity-75 md:opacity-0 md:group-hover:opacity-100 md:focus:opacity-100";
      link.href = "#" + heading.id;
      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));
    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";
      const computedStyle = getComputedStyle(codeBlock);
      const hasFileNameOffset =
        computedStyle.getPropertyValue("--file-name-offset").trim() !== "";
      const topClass = hasFileNameOffset
        ? "top-(--file-name-offset)"
        : "-top-3";
      const copyButton = document.createElement("button");
      copyButton.className = `copy-code absolute end-3 ${topClass} rounded bg-muted border border-muted px-2 py-1 text-xs leading-4 text-foreground font-medium`;
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);
      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;
      await navigator.clipboard.writeText(text ?? "");
      button.innerText = "Copied";
      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>
