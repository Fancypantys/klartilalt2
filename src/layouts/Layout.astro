---
import { ClientRouter } from "astro:transitions";
import { PUBLIC_GOOGLE_SITE_VERIFICATION } from "astro:env/client";
import { SITE } from "@/config";
import "@/styles/global.css";
import GA from "@/components/GA.astro";
import AffiliateTracking from "@/components/AffiliateTracking.astro";
import "../styles/global.css";     // ✅ Astro will rewrite paths with base
import { withBase } from "astro";  // we'll use this below

// Base URL ("/" locally, "/klartilalt2/" on GitHub Pages)
const BASE = import.meta.env.BASE_URL;

// Build a safe default OG image that respects BASE and avoids double slashes
const defaultOg = `${BASE}${(SITE.ogImage || "og.png").replace(/^\//, "")}`;

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  // ✅ default uses BASE and strips a leading slash if present
  ogImage = defaultOg,
  canonicalURL = new URL(Astro.url.pathname, Astro.url),
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(ogImage, Astro.url);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  image: `${socialImageURL}`,
  datePublished: `${pubDatetime?.toISOString()}`,
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [{ "@type": "Person", name: `${author}`, ...(profile && { url: profile }) }],
};
---

<!doctype html>
<html
  dir={SITE.dir}
  lang={SITE.lang ?? "da"}
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />

    <!-- ✅ Use BASE for static assets -->
    <link rel="icon" type="image/svg+xml" href={`${BASE}favicon.svg`} />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />

    <!-- ✅ Sitemap also with BASE -->
    <link rel="sitemap" href={`${BASE}sitemap-index.xml`} />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article times -->
    {pubDatetime && (
      <meta property="article:published_time" content={pubDatetime.toISOString()} />
    )}
    {modDatetime && (
      <meta property="article:modified_time" content={modDatetime.toISOString()} />
    )}

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- JSON-LD -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(structuredData)}
    />

    <!-- RSS autodiscovery (Astro builds absolute from `site` in astro.config) -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title={SITE.title}
      href={new URL("rss.xml", Astro.site)}
    />

    <meta name="theme-color" content="" />

    {PUBLIC_GOOGLE_SITE_VERIFICATION && (
      <meta
        name="google-site-verification"
        content={PUBLIC_GOOGLE_SITE_VERIFICATION}
      />
    )}

    <ClientRouter />

    <!-- ✅ External script with BASE -->
    <script src={`${BASE}toggle-theme.js`} defer></script>
  </head>
  <body>
    <slot />
    <GA />
    <AffiliateTracking />

    <!-- ✅ Rewrite root-absolute links with BASE on first load and after transitions -->
    <script is:inline>
      (function () {
        const BASE = import.meta.env.BASE_URL;

        function fixAnchors(scope = document) {
          const anchors = scope.querySelectorAll('a[href^="/"]:not([href^="//"])');
          anchors.forEach((a) => {
            const href = a.getAttribute("href");
            if (!href) return;
            if (href === "/") {
              a.setAttribute("href", BASE);
              return;
            }
            a.setAttribute("href", BASE + href.slice(1));
          });
        }

        if (document.readyState === "loading") {
          document.addEventListener("DOMContentLoaded", () => fixAnchors());
        } else {
          fixAnchors();
        }

        document.addEventListener("astro:after-swap", () => {
          fixAnchors();
        });
      })();
    </script>
  </body>
</html>

<style>
  html, body { margin: 0; width: 100%; height: 100%; }
</style>
